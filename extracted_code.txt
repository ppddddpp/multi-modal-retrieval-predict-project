src\ChestXRDataset.py
from torch.utils.data import Dataset
from transformers import AutoTokenizer
from tensorDICOM import DICOMImagePreprocessor
import multiprocessing
from pathlib import Path

BASE_DIR = Path(__file__).resolve().parent.parent
MODEL_PLACE = BASE_DIR / "models"

def tokenize_report(text, tokenizer, max_length=128):
    """Tokenize report using Hugging Face tokenizer."""
    tokens = tokenizer(
        text or "",
        padding='max_length',
        truncation=True,
        max_length=max_length,
        return_tensors='pt'
    )
    return tokens.input_ids.squeeze(0), tokens.attention_mask.squeeze(0)

class ChestXRDataset(Dataset):
    def __init__(self, records, image_preprocessor=None, tokenizer=None, max_length=128):
        """
        Args:
            records (list of dicts): List of records with keys:
                - 'dicom_path'
                - 'report_text'
                - optional 'mesh_labels'
            image_preprocessor (DICOMImagePreprocessor, optional): Image preprocessor.
                Defaults to None.
            tokenizer (transformers.AutoTokenizer, optional): Tokenizer for text.
                Defaults to None.
            max_length (int, optional): Maximum length of text tokenization.
                Defaults to 128.
        """
        self.records = records
        self.image_preprocessor = image_preprocessor or DICOMImagePreprocessor()
        cache_path = str(MODEL_PLACE / "clinicalbert")
        if tokenizer is None:
            tokenizer = AutoTokenizer.from_pretrained(
                "emilyalsentzer/Bio_ClinicalBERT",
                cache_dir=cache_path
        )
        self.tokenizer = tokenizer
        self.max_length = max_length

    def __len__(self):
        return len(self.records)

    def __getitem__(self, idx):    
        """
        Retrieve the dataset sample at the specified index.

        Args:
            idx (int): Index of the dataset sample to retrieve.

        Returns:
            dict: A dictionary containing the following keys:
                - 'image': Processed image tensor from the DICOM file.
                - 'input_ids': Tokenized input IDs of the report text.
                - 'attn_mask': Attention mask for the tokenized report text.
                - 'mesh_labels' (optional): Labels associated with the sample, if available.
        """
        rec = self.records[idx]
        # Process image
        img = self.image_preprocessor(rec['dicom_path'])        
        # Tokenize report
        input_ids, attn_mask = tokenize_report(
            rec.get('report_text', ''),
            self.tokenizer,
            self.max_length
        )
        sample = {
            'image': img,
            'input_ids': input_ids,
            'attn_mask': attn_mask
        }
        # Optional labels
        if 'mesh_labels' in rec:
            sample['mesh_labels'] = rec['mesh_labels']
        return sample

end src\ChestXRDataset.py

src\dataLoader.py
from tensorDICOM import DICOMImagePreprocessor
from transformers import AutoTokenizer
from ChestXRDataset import ChestXRDataset
from torch.utils.data import DataLoader
from pathlib import Path

BASE_DIR = Path(__file__).resolve().parent.parent
MODEL_PLACE = BASE_DIR / "models"

def tokenize_report(text, tokenizer, max_length=128):
    """
    Tokenize report using Hugging Face tokenizer.

    Args:
        text (str): Report text
        tokenizer (transformers.AutoTokenizer): Hugging Face tokenizer
        max_length (int, optional): Tokenization length. Defaults to 128.

    Returns:
        Tuple[torch.Tensor, torch.Tensor]: (input_ids, attention_mask)
    """
    tokens = tokenizer(
        text or "",
        padding='max_length',
        truncation=True,
        max_length=max_length,
        return_tensors='pt'
    )
    return tokens.input_ids.squeeze(0), tokens.attention_mask.squeeze(0)

def build_dataloader(records, batch_size=4, shuffle=True, num_workers=4,
                     mean=0.5, std=0.5, tokenizer=None):
    """
    Convenience function to create DataLoader for ChestXRDataset.

    Args:
        records (List[dict]): List of records parsed from OpenI XML.
        batch_size (int, optional): Defaults to 4.
        shuffle (bool, optional): Defaults to True.
        num_workers (int, optional): Defaults to 4.
        mean (float, optional): Image normalization mean. Defaults to 0.5.
        std (float, optional): Image normalization std. Defaults to 0.5.
        tokenizer (transformers.AutoTokenizer, optional): Defaults to None.

    Returns:
        torch.utils.data.DataLoader
    """
    preprocessor = DICOMImagePreprocessor(mean=mean, std=std)
    if tokenizer is None:
        tokenizer = AutoTokenizer.from_pretrained(
            "emilyalsentzer/Bio_ClinicalBERT",
            cache_dir=str(MODEL_PLACE / "clinicalbert")
        )
    dataset = ChestXRDataset(records, image_preprocessor=preprocessor,
                             tokenizer=tokenizer)
    return DataLoader(dataset, batch_size=batch_size,
                      shuffle=shuffle, num_workers=num_workers)

end src\dataLoader.py

src\dataParser.py
import os
import xml.etree.ElementTree as ET
import glob

def parse_openi_xml(xml_dir, dicom_root):
    """
    Parse OpenI XML reports and match to corresponding DICOM files

    Parameters
    ----------
    xml_dir : str
        Path to folder containing individual .xml report files
    dicom_root : str
        Root folder where .dcm files live (possibly nested)

    Returns
    -------
    records : list
        List of dicts where each dict has the keys 'id', 'dicom_path', 'report_text', and 'mesh_labels'
    """
    all_dcms = glob.glob(os.path.join(dicom_root, '**', '*.dcm'), recursive=True)
    dcm_map = { os.path.splitext(os.path.basename(p))[0]: p for p in all_dcms }

    print(f"[INFO] Found {len(os.listdir(xml_dir))} XML files in {xml_dir}")
    print(f"[INFO] Found {len(all_dcms)} DICOM files in {dicom_root}")

    records = []

    for fname in os.listdir(xml_dir):
        if not fname.endswith('.xml'):
            continue

        xml_path = os.path.join(xml_dir, fname)
        tree = ET.parse(xml_path)
        root = tree.getroot()

        for img_tag in root.findall('parentImage'):
            raw_id = img_tag.attrib.get('id')
            if not raw_id:
                continue

            # --- Normalize ID ---
            image_id = raw_id.replace("CXR", "")
            parts = image_id.split('_', 1)
            if len(parts) == 2:
                image_id = parts[1]
            else:
                continue

            # Match to DICOM file
            dcm_path = dcm_map.get(image_id)
            if not dcm_path:
                continue

            # Extract report text
            report = root.findtext('AbstractText') or ""
            report = report.strip()

            # MeSH terms
            mesh = [m.text for m in root.findall('.//MeshHeading/DescriptorName')]

            records.append({
                'id':          image_id,
                'dicom_path':  dcm_path,
                'report_text': report,
                'mesh_labels': mesh
            })

    print(f"[INFO] Loaded {len(records)} records.")
    return records

end src\dataParser.py

src\fusion.py
import os
import torch
import torch.nn as nn
import timm
from model_utils import load_hf_model_or_local
from safetensors.torch import load_file as load_safetensor
from pathlib import Path

try:
    BASE_DIR = Path(__file__).resolve().parent.parent
except NameError:
    BASE_DIR = Path.cwd().parent

MODEL_PLACE = BASE_DIR / 'models'
os.environ['TRANSFORMERS_CACHE'] = str(MODEL_PLACE)

class Backbones(nn.Module):
    """
    Image and text backbones: Swin Transformer and ClinicalBERT.
    Outputs global image features and pooled CLS text embeddings.
    """
    def __init__(
            self, swin_model_name='swin_base_patch4_window7_224', bert_model_name='emilyalsentzer/Bio_ClinicalBERT',
            swin_checkpoint_path=None,
            bert_local_dir=None,
            pretrained=True
            ):
        super().__init__()
        # instantiate with random weights
        self.swin = timm.create_model(swin_model_name, pretrained=False, in_chans=1)
        if pretrained and swin_checkpoint_path:
            # load the raw safetensors into a state dict
            try:
                state = load_safetensor(str(swin_checkpoint_path), device='cpu')
            except ImportError:
                # fallback to torch.load for .pth
                state = torch.load(str(swin_checkpoint_path), map_location='cpu')

            # collapse the 3‑channel patch‑embed weights to 1 channel by averaging
            if 'patch_embed.proj.weight' in state:
                w3 = state['patch_embed.proj.weight']  # shape [128, 3, 4, 4]
                w1 = w3.mean(dim=1, keepdim=True)      # shape [128, 1, 4, 4]
                state['patch_embed.proj.weight'] = w1
            
            # filter out the relative_position_index & attn_mask keys
            filtered = {
                k: v for k, v in state.items()
                if k in self.swin.state_dict()  # only keep matching names
            }

            # load with strict=False to ignore missing / unexpected
            missing, unexpected = self.swin.load_state_dict(filtered, strict=False)
            print(f"[fusion] Swin loaded – missing keys: {missing}, unexpected keys: {unexpected}")
            
        elif pretrained:
            # if no local checkpoint, let timm download / cache normally
            self.swin = timm.create_model(
                swin_model_name,
                pretrained=True,
                in_chans=1,
                checkpoint_path=str(MODEL_PLACE)
            )

        self.swin_features = nn.Sequential(*list(self.swin.children())[:-1])
        self.img_dim       = self.swin.num_features
        # load ClinicalBERT & record txt_dim
        self.bert   = load_hf_model_or_local(bert_model_name, local_dir=bert_local_dir)
        self.txt_dim = self.bert.config.hidden_size


    def forward(self, image, input_ids, attention_mask):
        # image: (B, C, H, W)
        B = image.size(0)
        img_feats = self.swin_features(image)   # (B, feat, 1, 1)
        img_feats = img_feats.view(B, -1)       # (B, img_dim)

        # text
        outputs = self.bert(input_ids=input_ids, attention_mask=attention_mask)
        txt_feats = outputs.pooler_output       # (B, txt_dim)

        return img_feats, txt_feats


class SimpleFusionHead(nn.Module):
    """
    Fusion MLP: concatenates image and text features and projects to joint embedding.
    """
    def __init__(self, img_dim, txt_dim, joint_dim=256, hidden_dim=512, dropout=0.3):
        super().__init__()
        self.fusion = nn.Sequential(
            nn.Linear(img_dim + txt_dim, hidden_dim),
            nn.ReLU(inplace=True),
            nn.Dropout(dropout),
            nn.Linear(hidden_dim, joint_dim)
        )

    def forward(self, img_feats, txt_feats):
        x = torch.cat([img_feats, txt_feats], dim=1)
        joint = self.fusion(x)
        return joint


class CrossModalFusion(nn.Module):
    """
    Text queries attend over global image features.
    """
    def __init__(self, img_dim, txt_dim, joint_dim=256, num_heads=4):
        super().__init__()
        # project into a common space for attention
        self.query_proj = nn.Linear(txt_dim, joint_dim)
        self.key_proj   = nn.Linear(img_dim, joint_dim)
        self.value_proj = nn.Linear(img_dim, joint_dim)

        self.attn = nn.MultiheadAttention(joint_dim, num_heads, batch_first=True)

        # final projection after concatenating attended img + text
        self.output = nn.Sequential(
            nn.Linear(joint_dim + txt_dim, joint_dim),
            nn.ReLU(),
            nn.Dropout(0.3)
        )

    def forward(self, img_feats, txt_feats):
        # img_feats: (B, img_dim), txt_feats: (B, txt_dim)
        B = img_feats.size(0)

        # prepare Q, K, V as sequences of length 1
        Q = self.query_proj(txt_feats).unsqueeze(1)   # (B, 1, joint_dim)
        K = self.key_proj(img_feats).unsqueeze(1)     # (B, 1, joint_dim)
        V = self.value_proj(img_feats).unsqueeze(1)   # (B, 1, joint_dim)

        # cross-attention: text queries, image keys/values
        attended, _ = self.attn(Q, K, V)              # (B, 1, joint_dim)
        attended = attended.squeeze(1)                # (B, joint_dim)

        # concatenate with original text embedding
        x = torch.cat([attended, txt_feats], dim=1)   # (B, joint_dim + txt_dim)
        return self.output(x)                         # (B, joint_dim)

class GatedFusion(nn.Module):
    def __init__(self, img_dim, txt_dim, joint_dim=256):
        super().__init__()
        # individual projections
        self.proj_img = nn.Linear(img_dim, joint_dim)
        self.proj_txt = nn.Linear(txt_dim, joint_dim)
        # gating
        self.gate = nn.Sequential(
            nn.Linear(img_dim + txt_dim, joint_dim),
            nn.Sigmoid()
        )

    def forward(self, img_feats, txt_feats):
        gi = self.proj_img(img_feats)   # (B, joint_dim)
        gt = self.proj_txt(txt_feats)   # (B, joint_dim)
        # compute gate z ∈ [0,1]^joint_dim
        z = self.gate(torch.cat([img_feats, txt_feats], dim=1))
        # fuse: z * gi + (1 - z) * gt
        fused = z * gi + (1 - z) * gt
        return fused

# compact bilinear pooling (MCB), multi‑modal factorized bilinear (MFB), or Mutan fusion


end src\fusion.py

src\model_utils.py
from transformers import AutoModel, AutoTokenizer
from pathlib import Path

try:
    BASE_DIR = Path(__file__).resolve().parent.parent
except NameError:
    BASE_DIR = Path.cwd().parent

MODEL_PLACE = BASE_DIR / 'models'

def load_hf_model_or_local(model_name, local_dir=None, is_tokenizer=False, **kwargs):
    """
    Load a Hugging Face model or tokenizer from a local directory if it exists, else download and save to that directory.

    Args:
        model_name (str): The name of the model or tokenizer to load.
        local_dir (str, Path): The local directory to look for the model or tokenizer, or None to use
            `MODEL_PLACE` from `model_utils.py`.
        is_tokenizer (bool): Whether to load a tokenizer or not. Defaults to False.
        **kwargs: Any additional keyword arguments to pass to the Hugging Face `from_pretrained` method.

    Returns:
        The loaded model or tokenizer.
    """
    from_pretrained = AutoTokenizer.from_pretrained if is_tokenizer else AutoModel.from_pretrained

    if local_dir:
        local_dir = Path(local_dir)
        if local_dir.exists() and any(local_dir.iterdir()):
            print(f"[Local] Loading {'tokenizer' if is_tokenizer else 'model'} from: {local_dir}")
            return from_pretrained(str(local_dir), **kwargs)
        else:
            print(f"[Download] {model_name} → Saving to {local_dir}")
            local_dir.mkdir(parents=True, exist_ok=True)
            model = from_pretrained(model_name, cache_dir=str(local_dir), **kwargs)
            model.save_pretrained(str(local_dir))
            if is_tokenizer:
                tokenizer = AutoTokenizer.from_pretrained(model_name, cache_dir=str(local_dir), **kwargs)
                tokenizer.save_pretrained(str(local_dir))
                return tokenizer
            return model
    else:
        local_dir = MODEL_PLACE
        print(f"[Download] {model_name} → Saving to {local_dir}")
        local_dir.mkdir(parents=True, exist_ok=True)
        model = from_pretrained(model_name, cache_dir=str(local_dir), **kwargs)
        model.save_pretrained(str(local_dir))
        if is_tokenizer:
            tokenizer = AutoTokenizer.from_pretrained(model_name, cache_dir=str(local_dir), **kwargs)
            tokenizer.save_pretrained(str(local_dir))
            return tokenizer
        return model

end src\model_utils.py

src\sanity_check_phase_1.ipynb
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b944120a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import matplotlib.pyplot as plt\n",
    "import torch\n",
    "from pathlib import Path\n",
    "from torch.utils.data import DataLoader\n",
    "from model_utils import load_hf_model_or_local\n",
    "from dataLoader import build_dataloader\n",
    "from stat_utils import RawStatDataset\n",
    "from dataParser import parse_openi_xml\n",
    "from fusion import Backbones\n",
    "from tensorDICOM import DICOMImagePreprocessor\n",
    "import pydicom\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "869b8117",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "XML DIR   exists: True  → d:\\Github\\multi-modal-retrieval-predict-project\\data\\openi\\xml\\NLMCXR_reports\\ecgen-radiology\n",
      "DICOM ROOT exists: True  → d:\\Github\\multi-modal-retrieval-predict-project\\data\\openi\\dicom\n",
      "[Local] Loading tokenizer from: d:\\Github\\multi-modal-retrieval-predict-project\\models\n",
      "[INFO] Found 3955 XML files in d:\\Github\\multi-modal-retrieval-predict-project\\data\\openi\\xml\\NLMCXR_reports\\ecgen-radiology\n",
      "[INFO] Found 7470 DICOM files in d:\\Github\\multi-modal-retrieval-predict-project\\data\\openi\\dicom\n",
      "[INFO] Loaded 2 records.\n",
      "Loaded records: 2\n",
      "Computed mean=0.5476, std=0.2722\n",
      "[fusion] Swin loaded – missing keys: [], unexpected keys: []\n",
      "[Local] Loading model from: d:\\Github\\multi-modal-retrieval-predict-project\\models\\clinicalbert_local\n",
      "Image feats: torch.Size([2, 50176])  NaNs? tensor(False)\n",
      "Text feats:  torch.Size([2, 768])  NaNs? tensor(False)\n",
      "Img norm mean: 107.98442077636719\n",
      "Txt norm mean: 18.788145065307617\n"
     ]
    }
   ],
   "source": [
    "# Resolve data paths...\n",
    "try:\n",
    "    BASE_DIR = Path(__file__).resolve().parent.parent\n",
    "except NameError:\n",
    "    BASE_DIR = Path.cwd().parent\n",
    "\n",
    "XML_DIR    = BASE_DIR / 'data' / 'openi' / 'xml' / 'NLMCXR_reports' / 'ecgen-radiology'\n",
    "DICOM_ROOT = BASE_DIR / 'data' / 'openi' / 'dicom'\n",
    "\n",
    "MODEL_PLACE = BASE_DIR / \"models\"\n",
    "print(\"XML DIR   exists:\", XML_DIR.exists(), \" →\", XML_DIR)\n",
    "print(\"DICOM ROOT exists:\", DICOM_ROOT.exists(), \" →\", DICOM_ROOT)\n",
    "\n",
    "# 0) Prepare a tokenizer for decoding\n",
    "os.environ['TRANSFORMERS_CACHE'] = str(MODEL_PLACE)\n",
    "tokenizer = load_hf_model_or_local(\"emilyalsentzer/Bio_ClinicalBERT\", local_dir=MODEL_PLACE, is_tokenizer=True)\n",
    "\n",
    "\n",
    "# 1) Parse records\n",
    "records = parse_openi_xml(str(XML_DIR), str(DICOM_ROOT))\n",
    "print(\"Loaded records:\", len(records))\n",
    "\n",
    "# 2) Compute mean/std with RawStatDataset\n",
    "ds = RawStatDataset(records[:100])\n",
    "dl = DataLoader(ds, batch_size=16, num_workers=4, pin_memory=True)\n",
    "sum_, sum_sq, count = 0.0, 0.0, 0\n",
    "for batch in dl:\n",
    "    b = batch.float()\n",
    "    sum_   += b.sum().item()\n",
    "    sum_sq += (b*b).sum().item()\n",
    "    count  += b.numel()\n",
    "mean = sum_ / count\n",
    "std  = ((sum_sq/count) - mean**2)**0.5\n",
    "print(f\"Computed mean={mean:.4f}, std={std:.4f}\")\n",
    "\n",
    "# 3) Build your multimodal DataLoader\n",
    "loader = build_dataloader(records, batch_size=4, mean=mean, std=std)\n",
    "\n",
    "# 4) Get one batch\n",
    "batch = next(iter(loader))\n",
    "imgs, ids, masks = batch['image'], batch['input_ids'], batch['attn_mask']\n",
    "\n",
    "# 5) Instantiate Backbones\n",
    "SWIN_CKPT = BASE_DIR / 'models' / 'swin_checkpoint.safetensors'\n",
    "BERT_DIR  = BASE_DIR / 'models' / 'clinicalbert_local/'\n",
    "backbones = Backbones(\n",
    "    pretrained=True,\n",
    "    swin_checkpoint_path=SWIN_CKPT,\n",
    "    bert_local_dir=BERT_DIR\n",
    ")\n",
    "\n",
    "# 6) Forward‐pass through Backbones\n",
    "img_feats, txt_feats = backbones(imgs, ids, masks)\n",
    "print(\"Image feats:\", img_feats.shape, \" NaNs?\", torch.isnan(img_feats).any())\n",
    "print(\"Text feats: \", txt_feats.shape, \" NaNs?\", torch.isnan(txt_feats).any())\n",
    "\n",
    "# 7) Embedding norms\n",
    "print(\"Img norm mean:\", img_feats.norm(dim=1).mean().item())\n",
    "print(\"Txt norm mean:\", txt_feats.norm(dim=1).mean().item())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bbb235ee",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[DEBUG] raw min/max       = 12230.00 / 32466.00\n",
      "        scaled min/max    = 12230.00 / 32466.00\n",
      "        window center/wid = 40.0 / 400.0\n",
      "        clip min/max      = 240.00 / 240.00\n",
      "        norm min/max      = 1.0000 / 1.0000\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 2000x400 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAUMAAAGbCAYAAABeXvJFAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjEsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvc2/+5QAAAAlwSFlzAAAPYQAAD2EBqD+naQAAD3dJREFUeJzt3QeMVFX7wOED/hVR/LB3RVRiQ6Ni7Ipiwa6xowZ770YTYxcNdsVYsXexxtixYYm9dyyxxS6IGClicP9575vZzCyLKEXUfZ5k8y13Z2fu3J39zbnnnvVr19TU1FQA2rj203sHAP4JxBBADAGSGAKIIUASQwAxBEhiCCCGAEkM/4TPPvustGvXrlx33XXT9HEWW2yxsscee5S2LI5xHOs45jXrrbde9fF3evLJJ6v9iP+lbRDDul/A1j6OPfbY8k9T27fzzjtvos/llVdemS771tY43v8d/ze9d+CfpF+/fqVr164N27p37166dOlSxowZU2acccbyT3LOOeeUAw88sMwyyyzlv+yRRx6Z3rtAGyCGdTbddNOyyiqrtPq1mWeeufyTrLjiiuWNN94ol19+eTnqqKOm2eOMGjWqzDrrrGV6mmmmmabr49M2OE2ezDnDmNvr1KlT+eqrr8o222xTfT7PPPOUo48+uowfP77h+88999yy5pprlrnmmqt07Nix9OjRo9x5551TtE9rrbVW6dWrVzn77LOrUeukPPHEE2Wdddapwjb77LOXrbfeurz//vsNtznllFOq5/nee++VXXbZpcwxxxxl7bXXbp7P3GKLLao5tHjDiOex/PLLN8+p3X333dW/400jnt/rr7/ecN9vvfVWdcwWX3zx6jbzzz9/2Wuvvcrw4cMnue8t5wxjXyY2rVE/xxc/m3iM+eabr3To0KEst9xy5Zprrpng/r/88svqZxjHZt555y1HHnlk+fXXX8vkqr02vvjii+qYxecLLbRQueSSS6qvv/3229XPLh4vzjpuueWWhu//8ccfq9dRHM/43v/973/VG/Wbb745wWN9/vnnZauttmrY98GDB7c63/niiy+WTTbZpHTu3Lk6m+jZs2d59tlnJ/t5/tcYGdYZOXJkGTZsWMO2ueeee6K3j+j17t27rLbaalXwHnvssWoeb4kllqhOX2suvPDC6gW76667lnHjxpVBgwaVHXbYodx///1l8803n+z9jXitu+665bLLLvvD0WHsV/wyRYjieyKeF110URXU1157rYpLvdi3bt26lf79+5f6/8Lbxx9/XEVy//33L7vttlv1nLfccstqdHrccceVgw46qLrdGWecUXbcccfywQcflPbt8/320UcfLZ988knZc889qxC+++675Yorrqj+94UXXqh+ef+sAQMGlF9++aVh2wUXXFCNlOMNJ3z33Xdl9dVXr+73kEMOqd6oHnroobL33nuXn3/+uRxxxBHV7eJYbLDBBlW4DjvssLLggguWG2+8sXrzmBLx2ohjHj+feMO6+eabq/2IaB1//PHVa2Hbbbetjl3fvn3LGmus0TxFE8fpnnvuqX4OsS2ey8CBA6t4xRtV7GNt1B5R/eabb8rhhx9eHdcI65AhQybYn3g+sT/xRnXyySdXP5drr722+v5nnnmmrLrqqlP0fP8T4r9n2NZde+218Rvf6kf49NNPq8/jdjW77757ta1fv34N97XSSis19ejRo2Hb6NGjG/49bty4pu7duzf16tWrYXuXLl2q+52UeNyDDz64+nz99ddvmn/++Zsfo/ZcXn755ebbr7jiik3zzjtv0/Dhw5u3vfnmm03t27dv6tu3b/O2k08+ufrePn36TPCYsW/xteeee6552+DBg6ttHTt2bPr888+btw8cOLDaPmTIkIkeg3DrrbdWt3v66aebt9X2P455Tc+ePauPibn99tsn+FnsvffeTQsssEDTsGHDGm678847N3Xu3Ll5fwYMGFB9b9xHzahRo5qWXHLJCZ5Da1o73rXXRv/+/Zu3jRgxojpO7dq1axo0aFDz9qFDh1a3jWNfM3bs2Kbx48c3PE4cjw4dOjQ8x/POO6/63nvuuad525gxY5qWXnrphn3//fffm7p169bUu3fv6vOaOAZdu3Zt2mijjf7wObYVTpPrxGlMjGDqPyblgAMOaPh3nIrGO3u9OKWsGTFiRDUCjdvFqGxKxUjv22+/rUYYrYlRQ4yY4tRtzjnnbN6+wgorlI022qg8+OCDk3xONcsuu2w1gqmJEXGI0cWiiy46wfb641B/DMaOHVuNwGPkFqbkOMRIKU6F47T/hBNOqLbF+8Vdd91VjVrj83is2keM5OP41x4znv8CCyxQtt9+++b7jFPI/fbbr0ypffbZp/nzmJpYaqmlqpFhjJprYlt8rf5YxSl9bUQd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CJDEEEAMAZIYAoghQBJDADEESGIIIIYASQwBxBAgiSGAGAIkMQQQQ4AkhgBiCJDEEEAMAZIYAoghQBJDADEESGIIIIYASQwBxBAgiSGAGAIkMQQQQ4AkhgBiCJDEEEAMAZIYAoghQBJDADEESGIIIIYASQwBxBAgiSGAGAIkMQQQQ4AkhgBiCJDEEEAMAZIYAoghQBJDADEESGIIIIYASQwBxBAgiSGAGAIkMQQQQ4AkhgBiCJDEEEAMAZIYAoghQBJDADEESGIIIIYASQwBxBAgiSGAGAIkMQQQQ4AkhgBiCJDEEEAMAZIYAoghQBJDADEESGIIIIYASQwBxBAgiSGAGAIkMQQQQ4AkhgBiCJDEEEAMAZIYAoghQBJDADEESGIIIIYASQwBxBAgiSGAGAIkMQQQQ4AkhgBiCJDEEEAMAZIYAoghQBJDADEESGIIIIYASQwBxBAgiSGAGAIkMQQQQ4AkhgBiCJDEEEAMAZIYAoghQBJDADEESGIIIIYASQwBxBAgiSGAGAIkMQQQQ4AkhgBiCJDEEEAMAZIYAoghQBJDADEESGIIIIYASQwBxBAgiSGAGAIkMQQQQ4AkhgBiCJDEEEAMAZIYAoghQBJDADEESGIIIIYASQwBxBAgiSFQKOX/AXNyRziy41dbAAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    " \n",
    "\n",
    "def plot_dicom_debug(dicom_path):\n",
    "    dcm = pydicom.dcmread(dicom_path)\n",
    "    raw = dcm.pixel_array.astype(np.float32)\n",
    "    slope = float(getattr(dcm, 'RescaleSlope', 1.0))\n",
    "    intercept = float(getattr(dcm, 'RescaleIntercept', 0.0))\n",
    "    scaled = raw * slope + intercept\n",
    "\n",
    "    wc_val = dcm.get('WindowCenter', 40.0)\n",
    "    ww_val = dcm.get('WindowWidth', 400.0)\n",
    "    wc = float(wc_val[0] if isinstance(wc_val, pydicom.multival.MultiValue) else wc_val)\n",
    "    ww = float(ww_val[0] if isinstance(ww_val, pydicom.multival.MultiValue) else ww_val)\n",
    "\n",
    "    lower, upper = wc - ww / 2, wc + ww / 2\n",
    "    win = np.clip(scaled, lower, upper)\n",
    "    norm = (win - lower) / (upper - lower + 1e-5)\n",
    "\n",
    "    print(f\"[DEBUG] raw min/max       = {raw.min():.2f} / {raw.max():.2f}\")\n",
    "    print(f\"        scaled min/max    = {scaled.min():.2f} / {scaled.max():.2f}\")\n",
    "    print(f\"        window center/wid = {wc} / {ww}\")\n",
    "    print(f\"        clip min/max      = {win.min():.2f} / {win.max():.2f}\")\n",
    "    print(f\"        norm min/max      = {norm.min():.4f} / {norm.max():.4f}\")\n",
    "\n",
    "    fig, axs = plt.subplots(1, 4, figsize=(20, 4))\n",
    "    axs[0].hist(raw.ravel(), bins=100)\n",
    "    axs[0].set_title(\"Raw\")\n",
    "    axs[1].hist(scaled.ravel(), bins=100)\n",
    "    axs[1].set_title(\"Scaled\")\n",
    "    axs[2].hist(win.ravel(), bins=100)\n",
    "    axs[2].set_title(\"Windowed\")\n",
    "    axs[3].hist(norm.ravel(), bins=100)\n",
    "    axs[3].set_title(\"Normalized\")\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "    plt.imshow(norm, cmap='gray', vmin=0, vmax=1)\n",
    "    plt.title(\"Final Normalized Image\")\n",
    "    plt.axis('off')\n",
    "    plt.show()\n",
    "\n",
    "# Call this with your DICOM file\n",
    "plot_dicom_debug(records[0]['dicom_path'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "446a02e8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[DEBUG] d:\\Github\\multi-modal-retrieval-predict-project\\data\\openi\\dicom\\NLMCXR_dcm\\1\\1_IM-0001-3001.dcm\n",
      "  raw min/max    = 12230.0/32466.0\n",
      "  slope,intercpt = 1.000, 0.000\n",
      "  scaled min/max = 12230.0/32466.0\n",
      "  window center  = 23250.5, width = 17781.0\n",
      "  post-win min/max = 0.000/1.000\n",
      "\n",
      "[WIN] img 0  min=0.0000, max=1.0000\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[DEBUG] d:\\Github\\multi-modal-retrieval-predict-project\\data\\openi\\dicom\\NLMCXR_dcm\\1\\1_IM-0001-4001.dcm\n",
      "  raw min/max    = 12944.0/31367.0\n",
      "  slope,intercpt = 1.000, 0.000\n",
      "  scaled min/max = 12944.0/31367.0\n",
      "  window center  = 23762.5, width = 14565.0\n",
      "  post-win min/max = 0.000/1.000\n",
      "\n",
      "[WIN] img 1  min=0.0000, max=1.0000\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "# 8) Debug DICOM ranges\n",
    "B = imgs.size(0)\n",
    "dp = DICOMImagePreprocessor(augment=False)\n",
    "for i in range(B):\n",
    "    arr = dp.load_raw_array(records[i]['dicom_path'])\n",
    "    print(f\"[WIN] img {i}  min={arr.min():.4f}, max={arr.max():.4f}\")\n",
    "    plt.imshow(arr, cmap='gray', vmin=arr.min(), vmax=arr.max())\n",
    "    plt.axis('off')\n",
    "    plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Columbina",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

end src\sanity_check_phase_1.ipynb

src\sanity_check_phase_1.py
import os
import matplotlib.pyplot as plt
import torch
from pathlib import Path
from torch.utils.data import DataLoader
from model_utils import load_hf_model_or_local
from dataLoader import build_dataloader
from stat_utils import RawStatDataset
from dataParser import parse_openi_xml
from fusion import Backbones
from tensorDICOM import DICOMImagePreprocessor
import pydicom
import numpy as np

# Resolve paths...
try:
    BASE_DIR = Path(__file__).resolve().parent.parent
except NameError:
    BASE_DIR = Path.cwd().parent

XML_DIR    = BASE_DIR / 'data' / 'openi' / 'xml' / 'NLMCXR_reports' / 'ecgen-radiology'
DICOM_ROOT = BASE_DIR / 'data' / 'openi' / 'dicom'
MODEL_PLACE = BASE_DIR / "models"
os.environ['TRANSFORMERS_CACHE'] = str(MODEL_PLACE)

def plot_dicom_debug(dicom_path):
    """
    Plot debugging information for a single DICOM image.

    Plots the original raw image, the scaled image, the windowed image, and the
    normalized image. Prints out the min/max values of each.

    Args:
        dicom_path (str): path to the DICOM image file
    """
    dcm = pydicom.dcmread(dicom_path)
    raw = dcm.pixel_array.astype(np.float32)
    slope = float(getattr(dcm, 'RescaleSlope', 1.0))
    intercept = float(getattr(dcm, 'RescaleIntercept', 0.0))
    scaled = raw * slope + intercept

    wc_val = dcm.get('WindowCenter', 40.0)
    ww_val = dcm.get('WindowWidth', 400.0)
    wc = float(wc_val[0] if isinstance(wc_val, pydicom.multival.MultiValue) else wc_val)
    ww = float(ww_val[0] if isinstance(ww_val, pydicom.multival.MultiValue) else ww_val)

    lower, upper = wc - ww / 2, wc + ww / 2
    win = np.clip(scaled, lower, upper)
    norm = (win - lower) / (upper - lower + 1e-5)

    print(f"[DEBUG] raw min/max       = {raw.min():.2f} / {raw.max():.2f}")
    print(f"        scaled min/max    = {scaled.min():.2f} / {scaled.max():.2f}")
    print(f"        window center/wid = {wc} / {ww}")
    print(f"        clip min/max      = {win.min():.2f} / {win.max():.2f}")
    print(f"        norm min/max      = {norm.min():.4f} / {norm.max():.4f}")

    fig, axs = plt.subplots(1, 4, figsize=(20, 4))
    axs[0].hist(raw.ravel(), bins=100)
    axs[0].set_title("Raw")
    axs[1].hist(scaled.ravel(), bins=100)
    axs[1].set_title("Scaled")
    axs[2].hist(win.ravel(), bins=100)
    axs[2].set_title("Windowed")
    axs[3].hist(norm.ravel(), bins=100)
    axs[3].set_title("Normalized")
    plt.tight_layout()
    plt.show()

    plt.imshow(norm, cmap='gray', vmin=0, vmax=1)
    plt.title("Final Normalized Image")
    plt.axis('off')
    plt.show()

if __name__ == "__main__":
    # Prepare a tokenizer for decoding
    print("XML DIR   exists:", XML_DIR.exists(), " →", XML_DIR)
    print("DICOM ROOT exists:", DICOM_ROOT.exists(), " →", DICOM_ROOT)
    tokenizer = load_hf_model_or_local("emilyalsentzer/Bio_ClinicalBERT", local_dir=MODEL_PLACE, is_tokenizer=True)

    # Parse records
    records = parse_openi_xml(str(XML_DIR), str(DICOM_ROOT))
    print("Loaded records:", len(records))

    # Compute mean/std with RawStatDataset
    ds = RawStatDataset(records[:100])
    dl = DataLoader(ds, batch_size=16, num_workers=4, pin_memory=True)
    sum_, sum_sq, count = 0.0, 0.0, 0
    for batch in dl:
        b = batch.float()
        sum_   += b.sum().item()
        sum_sq += (b*b).sum().item()
        count  += b.numel()
    mean = sum_ / count
    std  = ((sum_sq/count) - mean**2)**0.5
    print(f"Computed mean={mean:.4f}, std={std:.4f}")

    # Build your multimodal DataLoader
    loader = build_dataloader(records, batch_size=4, mean=mean, std=std)

    # Get one batch
    batch = next(iter(loader))
    imgs, ids, masks = batch['image'], batch['input_ids'], batch['attn_mask']

    # Instantiate Backbones
    SWIN_CKPT = BASE_DIR / 'models' / 'swin_checkpoint.safetensors'
    BERT_DIR  = BASE_DIR / 'models' / 'clinicalbert_local/'
    backbones = Backbones(
        pretrained=True,
        swin_checkpoint_path=SWIN_CKPT,
        bert_local_dir=BERT_DIR
    )

    # Forward‐pass through Backbones
    img_feats, txt_feats = backbones(imgs, ids, masks)
    print("Image feats:", img_feats.shape, " NaNs?", torch.isnan(img_feats).any())
    print("Text feats: ", txt_feats.shape, " NaNs?", torch.isnan(txt_feats).any())

    # Embedding norms
    print("Img norm mean:", img_feats.norm(dim=1).mean().item())
    print("Txt norm mean:", txt_feats.norm(dim=1).mean().item())

    # Debug DICOM
    plot_dicom_debug(records[0]['dicom_path'])

    # Debug DICOM ranges
    B = imgs.size(0)
    dp = DICOMImagePreprocessor(augment=False)
    for i in range(B):
        arr = dp.load_raw_array(records[i]['dicom_path'])
        print(f"[WIN] img {i}  min={arr.min():.4f}, max={arr.max():.4f}")
        plt.imshow(arr, cmap='gray', vmin=arr.min(), vmax=arr.max())
        plt.axis('off')
        plt.show()
end src\sanity_check_phase_1.py

src\stat_utils.py
from tensorDICOM import DICOMImagePreprocessor
from torch.utils.data import Dataset
import torch
import cv2
import numpy as np

class RawStatDataset(Dataset):
    def __init__(self, records, size=(224, 224)):
        self.records = records
        self.size = size  # target (width, height)

    def __len__(self):
        return len(self.records)

    def __getitem__(self, idx):
        rec = self.records[idx]
        try:
            # Load raw DICOM image
            pre = DICOMImagePreprocessor(augment=False)
            arr = pre.load_raw_array(rec['dicom_path'])  # shape: (H, W)

            # Resize to (H, W) = (224, 224)
            resized = cv2.resize(arr, self.size, interpolation=cv2.INTER_AREA)

            # Normalize to [0, 1]
            if resized.max() > 1:
                resized = resized.astype(np.float32) / 255.0

            # Convert to 3-channel when using Swin (by duplicating channels)
            resized = np.stack([resized] * 3, axis=0)  # shape: (3, 224, 224)

            return torch.from_numpy(resized).float()

        except Exception as e:
            print(f"[ERROR] Failed at idx={idx} → {rec['dicom_path']}: {e}")
            return torch.zeros((3, *self.size), dtype=torch.float32)  # fallback


end src\stat_utils.py

src\swinDownload.py
import timm
import os
from pathlib import Path
import shutil

# Trigger download (uses HuggingFace under the hood)
model_name = 'swin_base_patch4_window7_224'
print(f"Triggering download for {model_name}...")
model = timm.create_model(model_name, pretrained=True, in_chans=1)

# Find the safetensors file from the Hugging Face cache
hf_cache_dir = Path.home() / ".cache" / "huggingface" / "hub"
model_cache_root = next(hf_cache_dir.glob(f"models--timm--{model_name.replace('/', '--')}*"))
model_file = next(model_cache_root.rglob("model.safetensors"))

# Copy or move it to your project
target_dir = Path("models")
target_dir.mkdir(exist_ok=True)
target_ckpt = target_dir / "swin_checkpoint.safetensors"

#print(f"Copying {model_file} to {target_ckpt}")
#shutil.copy2(model_file, target_ckpt)
#print(f"Swin checkpoint copied to: {target_ckpt.resolve()}")

print(f"Moving {model_file} to {target_ckpt}")
shutil.move(model_file, target_ckpt)
print(f"Swin checkpoint moved to: {target_ckpt.resolve()}")

end src\swinDownload.py

src\tensorDICOM.py
import os
import torch
import pydicom
import numpy as np
from torchvision import transforms

class DICOMImagePreprocessor:
    """
    Object-oriented DICOM loader and preprocessor.
    Applies windowing, normalization, and torchvision transforms.
    """
    def __init__(self, mean=0.5, std=0.5,
                 default_window_center=40.0, default_window_width=400.0,
                 output_size=(224, 224), augment=True):
        self.mean = mean
        self.std = std
        self.default_center = default_window_center
        self.default_width = default_window_width
        # Define torchvision pipeline
        ops = [
            transforms.ToPILImage(),
            transforms.Resize(output_size)
        ]
        if augment:
            ops += [
                transforms.RandomRotation(5),
                transforms.RandomHorizontalFlip(0.1)
            ]
        ops += [
            transforms.ToTensor(),
            transforms.Normalize([mean], [std])
        ]
        self.transform = transforms.Compose(ops)

    def window_image(self, pixel_array, window_center, window_width):
        """
        Apply windowing transformation to raw pixel data based on the specified
        window center and width. This operation maps the pixel values to a 
        normalized range [0, 1] by clipping the pixel array within the specified 
        window and then scaling it.

        Parameters:
        pixel_array (np.ndarray): Raw pixel data to be transformed.
        window_center (float): The center value of the window.
        window_width (float): The total width of the window.

        Returns:
        np.ndarray: The windowed and normalized pixel data.
        """
        lower = window_center - window_width / 2
        upper = window_center + window_width / 2
        img = np.clip(pixel_array, lower, upper)
        return (img - lower) / (upper - lower)

    @staticmethod
    def load_raw_array(dicom_path):
        """
        Load a single DICOM file and return a normalized array.

        Parameters:
        dicom_path (str): Path to the DICOM file.

        Returns:
        array (np.ndarray): A normalized array of shape (H, W) ready for
            input to a neural network.
        """
        dcm = pydicom.dcmread(dicom_path)

        # Raw pixel values
        raw = dcm.pixel_array.astype(np.float32)

        # Rescale
        slope     = float(getattr(dcm, 'RescaleSlope', 1.0))
        intercept = float(getattr(dcm, 'RescaleIntercept', 0.0))
        scaled = raw * slope + intercept

        # WindowCenter / WindowWidth
        pmin, pmax = np.percentile(scaled, [0.5, 99.5])
        wc = (pmin + pmax) / 2
        ww = pmax - pmin

        # DEBUG LOGGING
        print(f"[DEBUG] {dicom_path}")
        print(f"  raw min/max    = {raw.min():.1f}/{raw.max():.1f}")
        print(f"  slope,intercpt = {slope:.3f}, {intercept:.3f}")
        print(f"  scaled min/max = {scaled.min():.1f}/{scaled.max():.1f}")
        print(f"  window center  = {wc:.1f}, width = {ww:.1f}")

        # Window + normalize
        lower, upper = wc - ww/2, wc + ww/2
        win = np.clip(scaled, lower, upper)
        norm = (scaled - scaled.min()) / (scaled.max() - scaled.min())

        print(f"  post-win min/max = {norm.min():.3f}/{norm.max():.3f}\n")

        return norm

    def load(self, dicom_path):
        """
        Load a single DICOM file and return a normalized tensor.

        Parameters:
        dicom_path (str): Path to the DICOM file.

        Returns:
        tensor (torch.Tensor): A normalized tensor of shape (1, H, W) ready for
            input to a neural network.
        """
        dcm = pydicom.dcmread(dicom_path)
        # Read window values (handle MultiValue)
        if 'WindowCenter' in dcm:
            wc = float(dcm.WindowCenter[0] if isinstance(dcm.WindowCenter, pydicom.multival.MultiValue) else dcm.WindowCenter)
        else:
            wc = self.default_center
        if 'WindowWidth' in dcm:
            ww = float(dcm.WindowWidth[0] if isinstance(dcm.WindowWidth, pydicom.multival.MultiValue) else dcm.WindowWidth)
        else:
            ww = self.default_width
        pixel_array = dcm.pixel_array.astype(np.float32)
        windowed = self.window_image(pixel_array, wc, ww)
        # expand channels
        img = np.expand_dims(windowed, axis=0)  # (1, H, W)
        tensor = torch.from_numpy(img)
        # apply torchvision transforms
        return self.transform(tensor)

    def __call__(self, dicom_path):
        return self.load(dicom_path)
end src\tensorDICOM.py

